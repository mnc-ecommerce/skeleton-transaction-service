// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package repositories

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMasterPromo = `-- name: CreateMasterPromo :one
INSERT INTO master_promo (promo_id, promo_name, promo_active, promo_start_timestamp, promo_end_timestamp, created_at,
                          created_by, updated_at, updated_by, min_amount, min_qty, multiplier, discount_amount,
                          max_discount_amount, condition_calculate_method, apply_all_product, voucher_gen_type,
                          promo_type, max_quota, is_quota_unlimited)
VALUES ($1, $2, $3, $4, $5, $6, $7,
        $8, $9, $10, $11, $12, $13, $14,
        $15, $16, $17, $18, $19, $20)
RETURNING promo_id, promo_name, promo_active, promo_start_timestamp, promo_end_timestamp, created_at, created_by, updated_at, updated_by, min_amount, min_qty, multiplier, discount_amount, max_discount_amount, condition_calculate_method, apply_all_product, voucher_gen_type, promo_type, max_quota, is_quota_unlimited
`

type CreateMasterPromoParams struct {
	Promoid                  int64                    `json:"promoid"`
	Promoname                string                   `json:"promoname"`
	Promoactive              bool                     `json:"promoactive"`
	Promostarttimestamp      pgtype.Timestamptz       `json:"promostarttimestamp"`
	Promoendtimestamp        pgtype.Timestamptz       `json:"promoendtimestamp"`
	Createdat                pgtype.Timestamptz       `json:"createdat"`
	Createdby                string                   `json:"createdby"`
	Updatedat                pgtype.Timestamptz       `json:"updatedat"`
	Updatedby                pgtype.Text              `json:"updatedby"`
	Minamount                pgtype.Float8            `json:"minamount"`
	Minqty                   pgtype.Int4              `json:"minqty"`
	Multiplier               int32                    `json:"multiplier"`
	Discountamount           pgtype.Float8            `json:"discountamount"`
	Maxdiscountamount        pgtype.Int4              `json:"maxdiscountamount"`
	Conditioncalculatemethod ConditionCalculateMethod `json:"conditioncalculatemethod"`
	Applyallproduct          bool                     `json:"applyallproduct"`
	Vouchergentype           VoucherGenType           `json:"vouchergentype"`
	Promotype                string                   `json:"promotype"`
	Maxquota                 pgtype.Int4              `json:"maxquota"`
	Isquotaunlimited         bool                     `json:"isquotaunlimited"`
}

func (q *Queries) CreateMasterPromo(ctx context.Context, arg CreateMasterPromoParams) (MasterPromo, error) {
	row := q.db.QueryRow(ctx, createMasterPromo,
		arg.Promoid,
		arg.Promoname,
		arg.Promoactive,
		arg.Promostarttimestamp,
		arg.Promoendtimestamp,
		arg.Createdat,
		arg.Createdby,
		arg.Updatedat,
		arg.Updatedby,
		arg.Minamount,
		arg.Minqty,
		arg.Multiplier,
		arg.Discountamount,
		arg.Maxdiscountamount,
		arg.Conditioncalculatemethod,
		arg.Applyallproduct,
		arg.Vouchergentype,
		arg.Promotype,
		arg.Maxquota,
		arg.Isquotaunlimited,
	)
	var i MasterPromo
	err := row.Scan(
		&i.PromoID,
		&i.PromoName,
		&i.PromoActive,
		&i.PromoStartTimestamp,
		&i.PromoEndTimestamp,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.MinAmount,
		&i.MinQty,
		&i.Multiplier,
		&i.DiscountAmount,
		&i.MaxDiscountAmount,
		&i.ConditionCalculateMethod,
		&i.ApplyAllProduct,
		&i.VoucherGenType,
		&i.PromoType,
		&i.MaxQuota,
		&i.IsQuotaUnlimited,
	)
	return i, err
}

const createMasterPromoCondition3pl = `-- name: CreateMasterPromoCondition3pl :one
INSERT INTO master_promo_condition_3pl (promo_id, id_3pl, condition_enabled, condition_start_timestamp,
                                        condition_end_timestamp, created_at, created_by, updated_at, updated_by)
VALUES ($1, $2, $3, $4, $5, $6, $7,
        $8, $9)
RETURNING promo_id, id_3pl, condition_enabled, condition_start_timestamp, condition_end_timestamp, created_at, created_by, updated_at, updated_by
`

type CreateMasterPromoCondition3plParams struct {
	Promoid                 int64              `json:"promoid"`
	Id3pl                   int32              `json:"id3pl"`
	Conditionenabled        bool               `json:"conditionenabled"`
	Conditionstarttimestamp pgtype.Timestamptz `json:"conditionstarttimestamp"`
	Conditionendtimestamp   pgtype.Timestamptz `json:"conditionendtimestamp"`
	Createdat               pgtype.Timestamptz `json:"createdat"`
	Createdby               string             `json:"createdby"`
	Updatedat               pgtype.Timestamptz `json:"updatedat"`
	Updatedby               pgtype.Text        `json:"updatedby"`
}

func (q *Queries) CreateMasterPromoCondition3pl(ctx context.Context, arg CreateMasterPromoCondition3plParams) (MasterPromoCondition3pl, error) {
	row := q.db.QueryRow(ctx, createMasterPromoCondition3pl,
		arg.Promoid,
		arg.Id3pl,
		arg.Conditionenabled,
		arg.Conditionstarttimestamp,
		arg.Conditionendtimestamp,
		arg.Createdat,
		arg.Createdby,
		arg.Updatedat,
		arg.Updatedby,
	)
	var i MasterPromoCondition3pl
	err := row.Scan(
		&i.PromoID,
		&i.ID3pl,
		&i.ConditionEnabled,
		&i.ConditionStartTimestamp,
		&i.ConditionEndTimestamp,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const createMasterPromoConditionPlatform = `-- name: CreateMasterPromoConditionPlatform :one
INSERT INTO master_promo_condition_platform (promo_id, platform_type, condition_enabled, condition_start_timestamp,
                                             condition_end_timestamp, created_at, created_by, updated_at, updated_by)
VALUES ($1, $2, $3, $4, $5, $6,
        $7, $8, $9)
RETURNING promo_id, platform_type, condition_enabled, condition_start_timestamp, condition_end_timestamp, created_at, created_by, updated_at, updated_by
`

type CreateMasterPromoConditionPlatformParams struct {
	Promoid                 int64              `json:"promoid"`
	Platformtype            ConditionPlatform  `json:"platformtype"`
	Conditionenabled        bool               `json:"conditionenabled"`
	Conditionstarttimestamp pgtype.Timestamptz `json:"conditionstarttimestamp"`
	Conditionendtimestamp   pgtype.Timestamptz `json:"conditionendtimestamp"`
	Createdat               pgtype.Timestamptz `json:"createdat"`
	Createdby               string             `json:"createdby"`
	Updatedat               pgtype.Timestamptz `json:"updatedat"`
	Updatedby               pgtype.Text        `json:"updatedby"`
}

func (q *Queries) CreateMasterPromoConditionPlatform(ctx context.Context, arg CreateMasterPromoConditionPlatformParams) (MasterPromoConditionPlatform, error) {
	row := q.db.QueryRow(ctx, createMasterPromoConditionPlatform,
		arg.Promoid,
		arg.Platformtype,
		arg.Conditionenabled,
		arg.Conditionstarttimestamp,
		arg.Conditionendtimestamp,
		arg.Createdat,
		arg.Createdby,
		arg.Updatedat,
		arg.Updatedby,
	)
	var i MasterPromoConditionPlatform
	err := row.Scan(
		&i.PromoID,
		&i.PlatformType,
		&i.ConditionEnabled,
		&i.ConditionStartTimestamp,
		&i.ConditionEndTimestamp,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const createMasterPromoConditionProduct = `-- name: CreateMasterPromoConditionProduct :one
INSERT INTO master_promo_condition_product (promo_id, product_id, created_at, created_by, updated_at, updated_by,
                                            condition_enable, condition_start_timestamp, condition_end_timestamp)
VALUES ($1, $2, $3, $4, $5, $6, $7,
        $8, $9)
RETURNING promo_id, product_id, created_at, created_by, updated_at, updated_by, condition_enable, condition_start_timestamp, condition_end_timestamp
`

type CreateMasterPromoConditionProductParams struct {
	Promoid                 int64              `json:"promoid"`
	Productid               int64              `json:"productid"`
	Createdat               pgtype.Timestamptz `json:"createdat"`
	Createdby               string             `json:"createdby"`
	Updatedat               pgtype.Timestamptz `json:"updatedat"`
	Updatedby               pgtype.Text        `json:"updatedby"`
	Conditionenable         bool               `json:"conditionenable"`
	Conditionstarttimestamp pgtype.Timestamptz `json:"conditionstarttimestamp"`
	Conditionendtimestamp   pgtype.Timestamptz `json:"conditionendtimestamp"`
}

func (q *Queries) CreateMasterPromoConditionProduct(ctx context.Context, arg CreateMasterPromoConditionProductParams) (MasterPromoConditionProduct, error) {
	row := q.db.QueryRow(ctx, createMasterPromoConditionProduct,
		arg.Promoid,
		arg.Productid,
		arg.Createdat,
		arg.Createdby,
		arg.Updatedat,
		arg.Updatedby,
		arg.Conditionenable,
		arg.Conditionstarttimestamp,
		arg.Conditionendtimestamp,
	)
	var i MasterPromoConditionProduct
	err := row.Scan(
		&i.PromoID,
		&i.ProductID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.ConditionEnable,
		&i.ConditionStartTimestamp,
		&i.ConditionEndTimestamp,
	)
	return i, err
}

const createMasterPromoProductBenefit = `-- name: CreateMasterPromoProductBenefit :one
INSERT INTO master_promo_product_benefit (promo_id, product_id, product_final_price, benefit_enable,
                                          benefit_start_timestamp, benefit_end_timestamp, created_at, created_by,
                                          updated_at, updated_by, available_stock)
VALUES ($1, $2, $3, $4, $5, $6,
        $7, $8, $9, $10, $11)
RETURNING promo_id, product_id, product_final_price, benefit_enable, benefit_start_timestamp, benefit_end_timestamp, created_at, created_by, updated_at, updated_by, available_stock
`

type CreateMasterPromoProductBenefitParams struct {
	Promoid               int64              `json:"promoid"`
	Productid             int64              `json:"productid"`
	Productfinalprice     pgtype.Float8      `json:"productfinalprice"`
	Benefitenable         bool               `json:"benefitenable"`
	Benefitstarttimestamp pgtype.Timestamptz `json:"benefitstarttimestamp"`
	Benefitendtimestamp   pgtype.Timestamptz `json:"benefitendtimestamp"`
	Createdat             pgtype.Timestamptz `json:"createdat"`
	Createdby             string             `json:"createdby"`
	Updatedat             pgtype.Timestamptz `json:"updatedat"`
	Updatedby             pgtype.Text        `json:"updatedby"`
	Availablestock        pgtype.Int4        `json:"availablestock"`
}

func (q *Queries) CreateMasterPromoProductBenefit(ctx context.Context, arg CreateMasterPromoProductBenefitParams) (MasterPromoProductBenefit, error) {
	row := q.db.QueryRow(ctx, createMasterPromoProductBenefit,
		arg.Promoid,
		arg.Productid,
		arg.Productfinalprice,
		arg.Benefitenable,
		arg.Benefitstarttimestamp,
		arg.Benefitendtimestamp,
		arg.Createdat,
		arg.Createdby,
		arg.Updatedat,
		arg.Updatedby,
		arg.Availablestock,
	)
	var i MasterPromoProductBenefit
	err := row.Scan(
		&i.PromoID,
		&i.ProductID,
		&i.ProductFinalPrice,
		&i.BenefitEnable,
		&i.BenefitStartTimestamp,
		&i.BenefitEndTimestamp,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.AvailableStock,
	)
	return i, err
}

const createMasterPromoVoucher = `-- name: CreateMasterPromoVoucher :one
INSERT INTO master_promo_voucher (promo_id, voucher_code, voucher_enabled, voucher_start_timestamp,
                                  voucher_end_timestamp, created_at, created_by, updated_at, updated_by)
VALUES ($1, $2, $3, $4, $5, $6, $7,
        $8, $9)
RETURNING promo_id, voucher_code, voucher_enabled, voucher_start_timestamp, voucher_end_timestamp, created_at, created_by, updated_at, updated_by
`

type CreateMasterPromoVoucherParams struct {
	Promoid               int64              `json:"promoid"`
	Vouchercode           string             `json:"vouchercode"`
	Voucherenabled        bool               `json:"voucherenabled"`
	Voucherstarttimestamp pgtype.Timestamptz `json:"voucherstarttimestamp"`
	Voucherendtimestamp   pgtype.Timestamptz `json:"voucherendtimestamp"`
	Createdat             pgtype.Timestamptz `json:"createdat"`
	Createdby             string             `json:"createdby"`
	Updatedat             pgtype.Timestamptz `json:"updatedat"`
	Updatedby             pgtype.Text        `json:"updatedby"`
}

func (q *Queries) CreateMasterPromoVoucher(ctx context.Context, arg CreateMasterPromoVoucherParams) (MasterPromoVoucher, error) {
	row := q.db.QueryRow(ctx, createMasterPromoVoucher,
		arg.Promoid,
		arg.Vouchercode,
		arg.Voucherenabled,
		arg.Voucherstarttimestamp,
		arg.Voucherendtimestamp,
		arg.Createdat,
		arg.Createdby,
		arg.Updatedat,
		arg.Updatedby,
	)
	var i MasterPromoVoucher
	err := row.Scan(
		&i.PromoID,
		&i.VoucherCode,
		&i.VoucherEnabled,
		&i.VoucherStartTimestamp,
		&i.VoucherEndTimestamp,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const findAllActiveMasterPromoToday = `-- name: FindAllActiveMasterPromoToday :many
SELECT promo_id,
       promo_name,
       promo_active,
       promo_start_timestamp,
       promo_end_timestamp,
       created_at,
       created_by,
       updated_at,
       updated_by,
       min_amount,
       min_qty,
       multiplier,
       discount_amount,
       max_discount_amount,
       condition_calculate_method,
       apply_all_product,
       voucher_gen_type,
       promo_type,
       max_quota,
       is_quota_unlimited
FROM master_promo
WHERE promo_active = true
  and current_date between promo_start_timestamp::date and promo_end_timestamp::date
`

func (q *Queries) FindAllActiveMasterPromoToday(ctx context.Context) ([]MasterPromo, error) {
	rows, err := q.db.Query(ctx, findAllActiveMasterPromoToday)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MasterPromo{}
	for rows.Next() {
		var i MasterPromo
		if err := rows.Scan(
			&i.PromoID,
			&i.PromoName,
			&i.PromoActive,
			&i.PromoStartTimestamp,
			&i.PromoEndTimestamp,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.MinAmount,
			&i.MinQty,
			&i.Multiplier,
			&i.DiscountAmount,
			&i.MaxDiscountAmount,
			&i.ConditionCalculateMethod,
			&i.ApplyAllProduct,
			&i.VoucherGenType,
			&i.PromoType,
			&i.MaxQuota,
			&i.IsQuotaUnlimited,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMasterPromoById = `-- name: GetMasterPromoById :one
SELECT promo_id,
       promo_name,
       promo_active,
       promo_start_timestamp,
       promo_end_timestamp,
       created_at,
       created_by,
       updated_at,
       updated_by,
       min_amount,
       min_qty,
       multiplier,
       discount_amount,
       max_discount_amount,
       condition_calculate_method,
       apply_all_product,
       voucher_gen_type,
       promo_type,
       max_quota,
       is_quota_unlimited
FROM master_promo
WHERE promo_id = $1
`

func (q *Queries) GetMasterPromoById(ctx context.Context, promoid int64) (MasterPromo, error) {
	row := q.db.QueryRow(ctx, getMasterPromoById, promoid)
	var i MasterPromo
	err := row.Scan(
		&i.PromoID,
		&i.PromoName,
		&i.PromoActive,
		&i.PromoStartTimestamp,
		&i.PromoEndTimestamp,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.MinAmount,
		&i.MinQty,
		&i.Multiplier,
		&i.DiscountAmount,
		&i.MaxDiscountAmount,
		&i.ConditionCalculateMethod,
		&i.ApplyAllProduct,
		&i.VoucherGenType,
		&i.PromoType,
		&i.MaxQuota,
		&i.IsQuotaUnlimited,
	)
	return i, err
}

const getMasterPromoCondition3PlBy = `-- name: GetMasterPromoCondition3PlBy :one
SELECT promo_id,
       id_3pl,
       condition_enabled,
       condition_start_timestamp,
       condition_end_timestamp,
       created_at,
       created_by,
       updated_at,
       updated_by
FROM master_promo_condition_3pl
WHERE promo_id = $1
  AND id_3pl = $2
`

type GetMasterPromoCondition3PlByParams struct {
	Promoid int64 `json:"promoid"`
	Id3pl   int32 `json:"id3pl"`
}

func (q *Queries) GetMasterPromoCondition3PlBy(ctx context.Context, arg GetMasterPromoCondition3PlByParams) (MasterPromoCondition3pl, error) {
	row := q.db.QueryRow(ctx, getMasterPromoCondition3PlBy, arg.Promoid, arg.Id3pl)
	var i MasterPromoCondition3pl
	err := row.Scan(
		&i.PromoID,
		&i.ID3pl,
		&i.ConditionEnabled,
		&i.ConditionStartTimestamp,
		&i.ConditionEndTimestamp,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getMasterPromoConditionPlatformBy = `-- name: GetMasterPromoConditionPlatformBy :one
SELECT promo_id,
       platform_type,
       condition_enabled,
       condition_start_timestamp,
       condition_end_timestamp,
       created_at,
       created_by,
       updated_at,
       updated_by
FROM master_promo_condition_platform
WHERE promo_id = $1
  AND platform_type = $2
`

type GetMasterPromoConditionPlatformByParams struct {
	Promoid      int64             `json:"promoid"`
	Platformtype ConditionPlatform `json:"platformtype"`
}

func (q *Queries) GetMasterPromoConditionPlatformBy(ctx context.Context, arg GetMasterPromoConditionPlatformByParams) (MasterPromoConditionPlatform, error) {
	row := q.db.QueryRow(ctx, getMasterPromoConditionPlatformBy, arg.Promoid, arg.Platformtype)
	var i MasterPromoConditionPlatform
	err := row.Scan(
		&i.PromoID,
		&i.PlatformType,
		&i.ConditionEnabled,
		&i.ConditionStartTimestamp,
		&i.ConditionEndTimestamp,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getMasterPromoConditionProductBy = `-- name: GetMasterPromoConditionProductBy :one
SELECT promo_id,
       product_id,
       created_at,
       created_by,
       updated_at,
       updated_by,
       condition_enable,
       condition_start_timestamp,
       condition_end_timestamp
FROM master_promo_condition_product
WHERE promo_id = $1
  AND product_id = $2
`

type GetMasterPromoConditionProductByParams struct {
	Promoid   int64 `json:"promoid"`
	Productid int64 `json:"productid"`
}

func (q *Queries) GetMasterPromoConditionProductBy(ctx context.Context, arg GetMasterPromoConditionProductByParams) (MasterPromoConditionProduct, error) {
	row := q.db.QueryRow(ctx, getMasterPromoConditionProductBy, arg.Promoid, arg.Productid)
	var i MasterPromoConditionProduct
	err := row.Scan(
		&i.PromoID,
		&i.ProductID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.ConditionEnable,
		&i.ConditionStartTimestamp,
		&i.ConditionEndTimestamp,
	)
	return i, err
}

const getMasterPromoProductBenefitBy = `-- name: GetMasterPromoProductBenefitBy :one
SELECT promo_id,
       product_id,
       product_final_price,
       benefit_enable,
       benefit_start_timestamp,
       benefit_end_timestamp,
       created_at,
       created_by,
       updated_at,
       updated_by,
       available_stock
FROM master_promo_product_benefit
WHERE promo_id = $1
  AND product_id = $2
`

type GetMasterPromoProductBenefitByParams struct {
	Promoid   int64 `json:"promoid"`
	Productid int64 `json:"productid"`
}

func (q *Queries) GetMasterPromoProductBenefitBy(ctx context.Context, arg GetMasterPromoProductBenefitByParams) (MasterPromoProductBenefit, error) {
	row := q.db.QueryRow(ctx, getMasterPromoProductBenefitBy, arg.Promoid, arg.Productid)
	var i MasterPromoProductBenefit
	err := row.Scan(
		&i.PromoID,
		&i.ProductID,
		&i.ProductFinalPrice,
		&i.BenefitEnable,
		&i.BenefitStartTimestamp,
		&i.BenefitEndTimestamp,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.AvailableStock,
	)
	return i, err
}

const getMasterPromoVoucherBy = `-- name: GetMasterPromoVoucherBy :one
SELECT promo_id,
       voucher_code,
       voucher_enabled,
       voucher_start_timestamp,
       voucher_end_timestamp,
       created_at,
       created_by,
       updated_at,
       updated_by
FROM master_promo_voucher
WHERE promo_id = $1
  AND voucher_code = $2
`

type GetMasterPromoVoucherByParams struct {
	Promoid     int64  `json:"promoid"`
	Vouchercode string `json:"vouchercode"`
}

func (q *Queries) GetMasterPromoVoucherBy(ctx context.Context, arg GetMasterPromoVoucherByParams) (MasterPromoVoucher, error) {
	row := q.db.QueryRow(ctx, getMasterPromoVoucherBy, arg.Promoid, arg.Vouchercode)
	var i MasterPromoVoucher
	err := row.Scan(
		&i.PromoID,
		&i.VoucherCode,
		&i.VoucherEnabled,
		&i.VoucherStartTimestamp,
		&i.VoucherEndTimestamp,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}
