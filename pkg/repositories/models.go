// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package repositories

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ConditionCalculateMethod string

const (
	ConditionCalculateMethodWHOLECART  ConditionCalculateMethod = "WHOLE_CART"
	ConditionCalculateMethodSYARATONLY ConditionCalculateMethod = "SYARAT_ONLY"
)

func (e *ConditionCalculateMethod) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ConditionCalculateMethod(s)
	case string:
		*e = ConditionCalculateMethod(s)
	default:
		return fmt.Errorf("unsupported scan type for ConditionCalculateMethod: %T", src)
	}
	return nil
}

type NullConditionCalculateMethod struct {
	ConditionCalculateMethod ConditionCalculateMethod
	Valid                    bool // Valid is true if ConditionCalculateMethod is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullConditionCalculateMethod) Scan(value interface{}) error {
	if value == nil {
		ns.ConditionCalculateMethod, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ConditionCalculateMethod.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullConditionCalculateMethod) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ConditionCalculateMethod), nil
}

func AllConditionCalculateMethodValues() []ConditionCalculateMethod {
	return []ConditionCalculateMethod{
		ConditionCalculateMethodWHOLECART,
		ConditionCalculateMethodSYARATONLY,
	}
}

type ConditionPlatform string

const (
	ConditionPlatformANDROID   ConditionPlatform = "ANDROID"
	ConditionPlatformIOS       ConditionPlatform = "IOS"
	ConditionPlatformMOBILEWEB ConditionPlatform = "MOBILE_WEB"
	ConditionPlatformDESKTOP   ConditionPlatform = "DESKTOP"
)

func (e *ConditionPlatform) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ConditionPlatform(s)
	case string:
		*e = ConditionPlatform(s)
	default:
		return fmt.Errorf("unsupported scan type for ConditionPlatform: %T", src)
	}
	return nil
}

type NullConditionPlatform struct {
	ConditionPlatform ConditionPlatform
	Valid             bool // Valid is true if ConditionPlatform is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullConditionPlatform) Scan(value interface{}) error {
	if value == nil {
		ns.ConditionPlatform, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ConditionPlatform.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullConditionPlatform) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ConditionPlatform), nil
}

func AllConditionPlatformValues() []ConditionPlatform {
	return []ConditionPlatform{
		ConditionPlatformANDROID,
		ConditionPlatformIOS,
		ConditionPlatformMOBILEWEB,
		ConditionPlatformDESKTOP,
	}
}

type VoucherGenType string

const (
	VoucherGenTypeNOCODE       VoucherGenType = "NO_CODE"
	VoucherGenTypeSINGLECODE   VoucherGenType = "SINGLE_CODE"
	VoucherGenTypeMULTIPLECODE VoucherGenType = "MULTIPLE_CODE"
)

func (e *VoucherGenType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = VoucherGenType(s)
	case string:
		*e = VoucherGenType(s)
	default:
		return fmt.Errorf("unsupported scan type for VoucherGenType: %T", src)
	}
	return nil
}

type NullVoucherGenType struct {
	VoucherGenType VoucherGenType
	Valid          bool // Valid is true if VoucherGenType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullVoucherGenType) Scan(value interface{}) error {
	if value == nil {
		ns.VoucherGenType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.VoucherGenType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullVoucherGenType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.VoucherGenType), nil
}

func AllVoucherGenTypeValues() []VoucherGenType {
	return []VoucherGenType{
		VoucherGenTypeNOCODE,
		VoucherGenTypeSINGLECODE,
		VoucherGenTypeMULTIPLECODE,
	}
}

type MasterPromo struct {
	PromoID                  int64                    `json:"promoID"`
	PromoName                string                   `json:"promoName"`
	PromoActive              bool                     `json:"promoActive"`
	PromoStartTimestamp      pgtype.Timestamptz       `json:"promoStartTimestamp"`
	PromoEndTimestamp        pgtype.Timestamptz       `json:"promoEndTimestamp"`
	CreatedAt                pgtype.Timestamptz       `json:"createdAt"`
	CreatedBy                string                   `json:"createdBy"`
	UpdatedAt                pgtype.Timestamptz       `json:"updatedAt"`
	UpdatedBy                pgtype.Text              `json:"updatedBy"`
	MinAmount                pgtype.Float8            `json:"minAmount"`
	MinQty                   pgtype.Int4              `json:"minQty"`
	Multiplier               int32                    `json:"multiplier"`
	DiscountAmount           pgtype.Float8            `json:"discountAmount"`
	MaxDiscountAmount        pgtype.Int4              `json:"maxDiscountAmount"`
	ConditionCalculateMethod ConditionCalculateMethod `json:"conditionCalculateMethod"`
	ApplyAllProduct          bool                     `json:"applyAllProduct"`
	VoucherGenType           VoucherGenType           `json:"voucherGenType"`
	PromoType                string                   `json:"promoType"`
	MaxQuota                 pgtype.Int4              `json:"maxQuota"`
	IsQuotaUnlimited         bool                     `json:"isQuotaUnlimited"`
}

type MasterPromoCondition3pl struct {
	PromoID                 int64              `json:"promoID"`
	ID3pl                   int32              `json:"id3pl"`
	ConditionEnabled        bool               `json:"conditionEnabled"`
	ConditionStartTimestamp pgtype.Timestamptz `json:"conditionStartTimestamp"`
	ConditionEndTimestamp   pgtype.Timestamptz `json:"conditionEndTimestamp"`
	CreatedAt               pgtype.Timestamptz `json:"createdAt"`
	CreatedBy               string             `json:"createdBy"`
	UpdatedAt               pgtype.Timestamptz `json:"updatedAt"`
	UpdatedBy               pgtype.Text        `json:"updatedBy"`
}

type MasterPromoConditionPlatform struct {
	PromoID                 int64              `json:"promoID"`
	PlatformType            ConditionPlatform  `json:"platformType"`
	ConditionEnabled        bool               `json:"conditionEnabled"`
	ConditionStartTimestamp pgtype.Timestamptz `json:"conditionStartTimestamp"`
	ConditionEndTimestamp   pgtype.Timestamptz `json:"conditionEndTimestamp"`
	CreatedAt               pgtype.Timestamptz `json:"createdAt"`
	CreatedBy               string             `json:"createdBy"`
	UpdatedAt               pgtype.Timestamptz `json:"updatedAt"`
	UpdatedBy               pgtype.Text        `json:"updatedBy"`
}

type MasterPromoConditionProduct struct {
	PromoID                 int64              `json:"promoID"`
	ProductID               int64              `json:"productID"`
	CreatedAt               pgtype.Timestamptz `json:"createdAt"`
	CreatedBy               string             `json:"createdBy"`
	UpdatedAt               pgtype.Timestamptz `json:"updatedAt"`
	UpdatedBy               pgtype.Text        `json:"updatedBy"`
	ConditionEnable         bool               `json:"conditionEnable"`
	ConditionStartTimestamp pgtype.Timestamptz `json:"conditionStartTimestamp"`
	ConditionEndTimestamp   pgtype.Timestamptz `json:"conditionEndTimestamp"`
}

type MasterPromoProductBenefit struct {
	PromoID               int64              `json:"promoID"`
	ProductID             int64              `json:"productID"`
	ProductFinalPrice     pgtype.Float8      `json:"productFinalPrice"`
	BenefitEnable         bool               `json:"benefitEnable"`
	BenefitStartTimestamp pgtype.Timestamptz `json:"benefitStartTimestamp"`
	BenefitEndTimestamp   pgtype.Timestamptz `json:"benefitEndTimestamp"`
	CreatedAt             pgtype.Timestamptz `json:"createdAt"`
	CreatedBy             string             `json:"createdBy"`
	UpdatedAt             pgtype.Timestamptz `json:"updatedAt"`
	UpdatedBy             pgtype.Text        `json:"updatedBy"`
	AvailableStock        pgtype.Int4        `json:"availableStock"`
}

type MasterPromoVoucher struct {
	PromoID               int64              `json:"promoID"`
	VoucherCode           string             `json:"voucherCode"`
	VoucherEnabled        bool               `json:"voucherEnabled"`
	VoucherStartTimestamp pgtype.Timestamptz `json:"voucherStartTimestamp"`
	VoucherEndTimestamp   pgtype.Timestamptz `json:"voucherEndTimestamp"`
	CreatedAt             pgtype.Timestamptz `json:"createdAt"`
	CreatedBy             string             `json:"createdBy"`
	UpdatedAt             pgtype.Timestamptz `json:"updatedAt"`
	UpdatedBy             pgtype.Text        `json:"updatedBy"`
}
